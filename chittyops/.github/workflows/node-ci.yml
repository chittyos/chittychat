name: Node.js CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install ChittyBeacon
      run: npm install @chittycorp/app-beacon --save-dev
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test --if-present
      env:
        CI: true
        BEACON_ENDPOINT: ${{ secrets.BEACON_ENDPOINT || 'https://beacon.cloudeto.com' }}
    
    - name: Build
      run: npm run build --if-present

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  deploy-preview:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies with ChittyBeacon
      run: |
        npm ci
        npm install @chittycorp/app-beacon --save
    
    - name: Add ChittyBeacon to entry point
      run: |
        if [ -f "index.js" ]; then
          echo "require('@chittycorp/app-beacon');" | cat - index.js > temp && mv temp index.js
        elif [ -f "src/index.js" ]; then
          echo "require('@chittycorp/app-beacon');" | cat - src/index.js > temp && mv temp src/index.js
        elif [ -f "src/index.ts" ]; then
          echo "import '@chittycorp/app-beacon';" | cat - src/index.ts > temp && mv temp src/index.ts
        fi
    
    - name: Build project
      run: npm run build --if-present
    
    - name: Deploy preview
      run: echo "Deploy preview logic here"
      env:
        BEACON_VERBOSE: true

  deploy-production:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies with ChittyBeacon
      run: |
        npm ci
        npm install @chittycorp/app-beacon --save
    
    - name: Add ChittyBeacon to production build
      run: |
        echo "Adding ChittyBeacon for production tracking..."
        # Add beacon to package.json if not present
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        if (!pkg.dependencies) pkg.dependencies = {};
        if (!pkg.dependencies['@chittycorp/app-beacon']) {
          pkg.dependencies['@chittycorp/app-beacon'] = '^1.0.0';
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        }
        "
    
    - name: Build for production
      run: npm run build --if-present
      env:
        NODE_ENV: production
        BEACON_ENDPOINT: ${{ secrets.BEACON_ENDPOINT || 'https://beacon.cloudeto.com' }}
    
    - name: Deploy to production
      run: echo "Deploy to production logic here"
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}