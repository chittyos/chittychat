name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Workers
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install ChittyBeacon
      run: npm install @chittycorp/app-beacon --save
    
    - name: Add ChittyBeacon to Worker
      run: |
        # Add beacon import to worker entry point
        if [ -f "src/index.js" ]; then
          echo "import '@chittycorp/app-beacon';" | cat - src/index.js > temp && mv temp src/index.js
        elif [ -f "src/index.ts" ]; then
          echo "import '@chittycorp/app-beacon';" | cat - src/index.ts > temp && mv temp src/index.ts
        elif [ -f "index.js" ]; then
          echo "import '@chittycorp/app-beacon';" | cat - index.js > temp && mv temp index.js
        fi
    
    - name: Build project
      run: npm run build --if-present
    
    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        environment: ${{ github.event.inputs.environment || 'production' }}
        vars: |
          BEACON_ENDPOINT=${{ secrets.BEACON_ENDPOINT || 'https://beacon.cloudeto.com' }}
          BEACON_INTERVAL=300000
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    
    - name: Purge Cloudflare cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'
      continue-on-error: true
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add notification logic here (Slack, Discord, etc.)