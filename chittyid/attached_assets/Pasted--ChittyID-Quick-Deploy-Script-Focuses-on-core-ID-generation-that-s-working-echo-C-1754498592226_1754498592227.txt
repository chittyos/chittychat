 # ChittyID Quick Deploy Script
     # Focuses on core ID generation that's working

     echo "🚀 ChittyID Deployment Script"
     echo "=============================="

     # Check for required tools
     command -v node >/dev/null 2>&1 || { echo "❌ Node.js is required but not installed."; exit 1; }
     command -v npm >/dev/null 2>&1 || { echo "❌ npm is required but not installed."; exit 1; }

     # Create minimal .env if not exists
     if [ ! -f .env ]; then
       echo "📝 Creating .env file..."
       cat > .env << EOF
     # ChittyID Environment Configuration
     NODE_ENV=production
     PORT=3000

     # Database (using SQLite for quick deploy)
     DATABASE_URL=sqlite://./chittyid.db

     # API Keys (add your own)
     CLERK_SECRET_KEY=
     CLERK_PUBLISHABLE_KEY=

     # ChittyID Configuration
     CHITTYID_NODE_ID=1
     CHITTYID_DEFAULT_JURISDICTION=USA
     EOF
       echo "✅ Created .env file - please add your API keys"
     fi

     # Install dependencies
     echo "📦 Installing dependencies..."
     npm install --production

     # Create minimal working build
     echo "🔨 Building core modules..."
     mkdir -p dist/core

     # Copy only the working core modules
     cat > dist/core/index.js << 'EOF'
     // ChittyID Core - Minimal Working Version
     const { ChittyIDv2, generateChittyID, validateChittyID, parseChittyID } = require('./chittyid-v2-specification');
     const { IDStampingSystem } = require('./id-stamping-system');
     const { DualImmutabilitySystem } = require('./dual-immutability-system');

     module.exports = {
       ChittyIDv2,
       generateChittyID,
       validateChittyID,
       parseChittyID,
       IDStampingSystem,
       DualImmutabilitySystem
     };
     EOF

     # Compile just the working core modules with loose TypeScript
     echo "🔧 Compiling core modules..."
     npx tsc src/core/chittyid-v2-specification.ts --outDir dist/core --module commonjs --target es2022 --esModuleInterop --skipLibCheck ||
     true
     npx tsc src/core/id-stamping-system.ts --outDir dist/core --module commonjs --target es2022 --esModuleInterop --skipLibCheck || true
     npx tsc src/core/dual-immutability-system.ts --outDir dist/core --module commonjs --target es2022 --esModuleInterop --skipLibCheck ||
     true

     # Create simple API server
     echo "🌐 Creating API server..."
     cat > dist/server.js << 'EOF'
     const express = require('express');
     const { generateChittyID, validateChittyID, parseChittyID } = require('./core/chittyid-v2-specification');

     const app = express();
     app.use(express.json());

     // Health check
     app.get('/health', (req, res) => {
       res.json({ status: 'ok', service: 'ChittyID v1.0.0' });
     });

     // Generate ChittyID
     app.post('/api/v1/generate', (req, res) => {
       try {
         const { vertical = 'user' } = req.body;
         const id = generateChittyID(vertical);
         const parsed = parseChittyID(id);

         res.json({
           chittyId: id,
           displayFormat: id,
           timestamp: parsed?.timestamp,
           vertical: parsed?.vertical,
           valid: validateChittyID(id)
         });
       } catch (error) {
         res.status(500).json({ error: error.message });
       }
     });

     // Validate ChittyID
     app.post('/api/v1/validate', (req, res) => {
       try {
         const { chittyId } = req.body;
         const isValid = validateChittyID(chittyId);
         const parsed = isValid ? parseChittyID(chittyId) : null;

         res.json({
           chittyId,
           valid: isValid,
           details: parsed
         });
       } catch (error) {
         res.status(500).json({ error: error.message });
       }
     });

     const PORT = process.env.PORT || 3000;
     app.listen(PORT, () => {
       console.log(`🚀 ChittyID API running on port ${PORT}`);
       console.log(`📍 Health check: http://localhost:${PORT}/health`);
       console.log(`🔑 Generate ID: POST http://localhost:${PORT}/api/v1/generate`);
       console.log(`✅ Validate ID: POST http://localhost:${PORT}/api/v1/validate`);
     });
     EOF

     # Create package.json for production
     echo "📋 Creating production package.json..."
     cat > dist/package.json << 'EOF'
     {
       "name": "chittyid-api",
       "version": "1.0.0",
       "main": "server.js",
       "scripts": {
         "start": "node server.js"
       },
       "dependencies": {
         "express": "^4.18.2"
       }
     }
     EOF

     # Create start script
     cat > start.sh << 'EOF'
     #!/bin/bash
     cd dist
     npm install --production
     npm start
     EOF
     chmod +x start.sh

     echo ""
     echo "✅ Deployment preparation complete!"
     echo ""
     echo "📂 Core files compiled to: ./dist/"
     echo "🚀 To start the server: ./start.sh"
     echo ""
     echo "⚡ Quick test after starting:"
     echo "curl -X POST http://localhost:3000/api/v1/generate -H 'Content-Type: application/json' -d '{\"vertical\":\"user\"}'"
     echo ""
     echo "🔧 Note: This is a minimal deployment focusing on working ID generation."
     echo "   Full features will be added as compilation issues are resolved."

